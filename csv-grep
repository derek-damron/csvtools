#! /bin/bash
SRCDIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

DELIM=','
QUO='"'
while getopts h?d:f:c:p:r:v? OPT; do
    case $OPT in
        \?|h)
echo "csv-grep: Output rows in a csv where the datum in a specified"
echo "          column matches a regular expression pattern."
echo
echo "usage: csv-grep [-f FILE] [-d DELIMITER] [-q QUOTING_CHAR]"
echo "                [-r HEADER_FILE] -c COLUMN_NAME_OR_INDEX"
echo "                -p PATTERN"
echo
echo "required arguments:"
echo "  -c COLUMN_NAME_OR_INDEX"
echo "                    Name of the column to match against the"
echo "                    supplied pattern. Alternatively, a"
echo "                    numeric index may be supplied."
echo "  -p PATTERN        Regular expression pattern to match the"
echo "                    datum in the supplied column against."
echo
echo "optional arguments:"
echo "  -d DELIMITER      Character delimiting the input file."
echo "  -f FILE           Delimited file. If not supplied input is"
echo "                    read from the standard input stream."
echo "  -q QUOTING_CHAR   Character used for quoting fileds in the"
echo "                    file. If not supplied, assumed to be"
echo "                    double quotes"
echo "  -r HEADER_FILE    Header file containing the column names"
echo "                    for the delimited file. If not supplied,"
echo "                    it is assumed that the first line of the"
echo "                    input file contains the header information."
echo "  -v REVERSE_MATCH  Output rows that do not match the given"
echo "                    pattern."
            exit 0
            ;;
        d)
            DELIM=$OPTARG
            ;;
        q)
            QUO=$OPTARG
            ;;
        f)
            FILE=$OPTARG
            ;;
        r)
            HEADERFILE=$OPTARG
            ;;
        c)
            COL=$OPTARG
            ;;
        p)
            PATTERN=$OPTARG
            ;;
        v)
            REVERSEMATCH=1
            ;;
    esac
done


if [[ $COL == '' ]]; then
    echo "csv-grep: Argument -c required." >&2
    exit 1
fi
if [[ $PATTERN == '' ]]; then
    echo "csv-grep: Argument -p required." >&2
    exit 1
fi
# Reverse match is optional.
if [[ $REVERSEMATCH == '' ]]; then
    REVERSEMATCH=0
fi
# Explicit file argument is optional, if not supplied it is assumed the 
# file is streaming from standard input
if [[ $FILE == '' ]]; then
    FILE="stdin"
fi
# Header argument is optional, if not supplied it is assumed to be the 
# first line in FILE.
if [[ $HEADERFILE == '' ]]; then
    HEADERFILE=$FILE
fi

# We need to get the actual header to keep so it does not interfere
# with our grepping.  How to do this depends on whether we are working from 
# standard input, or from a file.
if [[ $HEADERFILE != $FILE ]]; then
    HEADER=$(cat $HEADERFILE | head -1)
    NROWTOSKIP=0
elif [[ $FILE == "stdin" ]]; then
    read HEADER
    NROWTOSKIP=0
else
    HEADER=$(cat $HEADERFILE | head -1)
    NROWTOSKIP=1
fi

# Check if the column array is numeric id's, if not, parse the array of names
# to get the numeric indicies of the named columns
if [[ $COL =~ ^[0-9\ ]+$ ]]; then
    COLIDX=$COL
else
    COLIDX=$(util/csv-getcolidx -r $HEADER -d $DELIM -c $COL)
    if [[ $? != 0 ]]; then
        echo "csv-grep: Could not find indicies for some of the requested columns." >&2
        echo "Are you sure they all exist?" >&2
        exit 1
    fi
fi

if [[ $HEADERFILE == $FILE ]]; then
    echo $HEADER
fi

if [[ $FILE != 'stdin' ]]; then
    $SRCDIR/bin/grep $FILE $DELIM $QUO $NROWTOSKIP $REVERSEMATCH $COLIDX "$PATTERN"
else
    cat /dev/stdin \
        | $SRCDIR/bin/grep $FILE $DELIM $QUO $NROWTOSKIP $REVERSEMATCH $COLIDX "$PATTERN"
fi

exit 0
